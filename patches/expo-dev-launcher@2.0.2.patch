diff --git a/android/src/debug/java/expo/modules/devlauncher/DevLauncherController.kt b/android/src/debug/java/expo/modules/devlauncher/DevLauncherController.kt
index e7b8036506a7d75d2dc7413fa3f1899564a195a8..d8047161b9f236a7e75cec60cc9b31e652529370 100644
--- a/android/src/debug/java/expo/modules/devlauncher/DevLauncherController.kt
+++ b/android/src/debug/java/expo/modules/devlauncher/DevLauncherController.kt
@@ -87,7 +87,15 @@ class DevLauncherController private constructor() :
   private var appIsLoading = false
 
   private fun isEASUpdateURL(url: Uri): Boolean {
-    return url.host.equals("u.expo.dev") || url.host.equals("staging-u.expo.dev")
+    // Instead of checking on `u.expo.dev` and `staging-u.expo.dev`, we check if its NOT an EAS URL (people can use self-hosted updates)
+    val isIp = isValidIPAddress(url.host);
+    return !isIp;
+  }
+
+  private fun isValidIPAddress(ip: String?):Boolean {
+    if (ip == null) return false
+    val reg0To255 = ("(\\d{1,2}|(0|1)\\" + "d{2}|2[0-4]\\d|25[0-5])").toRegex()
+    return reg0To255.matches(ip)
   }
 
   override suspend fun loadApp(url: Uri, projectUrl: Uri?, mainActivity: ReactActivity?) {
diff --git a/ios/EXDevLauncherController.m b/ios/EXDevLauncherController.m
index e02d908792d60e41a739a7d678c1bfb67188712f..ee59d91c932865e545a15d763790212766901ce7 100644
--- a/ios/EXDevLauncherController.m
+++ b/ios/EXDevLauncherController.m
@@ -85,9 +85,9 @@
 
 - (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge
 {
-  
+
   NSMutableArray *modules = [[DevMenuVendoredModulesUtils vendoredModules:bridge addReanimated2:FALSE] mutableCopy];
-  
+
   [modules addObject:[RCTDevMenu new]];
   [modules addObject:[RCTAsyncLocalStorage new]];
 #ifndef EX_DEV_LAUNCHER_URL
@@ -96,7 +96,7 @@
   [modules addObject:[EXDevLauncherLoadingView new]];
   [modules addObject:[EXDevLauncherInternal new]];
   [modules addObject:[EXDevLauncherAuth new]];
-  
+
   return modules;
 }
 
@@ -195,7 +195,7 @@
   if (!deepLink) {
     return nil;
   }
-  
+
   return @{
     UIApplicationLaunchOptionsURLKey: deepLink
   };
@@ -267,14 +267,14 @@
 
   [_appBridge invalidate];
   [self invalidateDevMenuApp];
-  
+
   self.manifest = nil;
   self.manifestURL = nil;
 
   if (@available(iOS 12, *)) {
     [self _applyUserInterfaceStyle:UIUserInterfaceStyleUnspecified];
   }
-  
+
   [self _removeInitModuleObserver];
 
   _launcherBridge = [[EXDevLauncherRCTBridge alloc] initWithDelegate:self launchOptions:_launchOptions];
@@ -284,7 +284,7 @@
                                             initialProperties:@{}];
 
   [self _ensureUserInterfaceStyleIsInSyncWithTraitEnv:rootView];
-  
+
   [[NSNotificationCenter defaultCenter] addObserver:self
                                            selector:@selector(onAppContentDidAppear)
                                                name:RCTContentDidAppearNotification
@@ -312,14 +312,14 @@
   if (![EXDevLauncherURLHelper isDevLauncherURL:url]) {
     return [self _handleExternalDeepLink:url options:options];
   }
-  
+
   if (![EXDevLauncherURLHelper hasUrlQueryParam:url]) {
     // edgecase: this is a dev launcher url but it doesnt specify what url to open
     // fallback to navigating to the launcher home screen
     [self navigateToLauncher];
     return true;
   }
-  
+
   [self loadApp:url onSuccess:nil onError:^(NSError *error) {
     __weak typeof(self) weakSelf = self;
     dispatch_async(dispatch_get_main_queue(), ^{
@@ -335,7 +335,7 @@
       [self.errorManager showError:appError];
     });
   }];
-  
+
   return true;
 }
 
@@ -344,14 +344,14 @@
   if ([self isAppRunning]) {
     return false;
   }
-  
+
   self.pendingDeepLinkRegistry.pendingDeepLink = url;
 
   // cold boot -- need to initialize the dev launcher app RN app to handle the link
   if (![_launcherBridge isValid]) {
     [self navigateToLauncher];
   }
-  
+
   return true;
 }
 
@@ -365,11 +365,8 @@
 
 - (BOOL)isEASUpdateURL:(NSURL *)url
 {
-  if ([url.host isEqual: @"u.expo.dev"]) {
-    return true;
-  }
-  
-  return false;
+    // Shady workaround to test for ip
+    return ![EXDevLauncherURLHelper hostIsIp:url.host];
 }
 
 -(void)loadApp:(NSURL *)url onSuccess:(void (^ _Nullable)(void))onSuccess onError:(void (^ _Nullable)(NSError *error))onError
@@ -387,23 +384,23 @@
 - (void)loadApp:(NSURL *)url withProjectUrl:(NSURL * _Nullable)projectUrl onSuccess:(void (^ _Nullable)(void))onSuccess onError:(void (^ _Nullable)(NSError *error))onError
 {
   EXDevLauncherUrl *devLauncherUrl = [[EXDevLauncherUrl alloc] init:url];
-  NSURL *expoUrl = devLauncherUrl.url; 
+  NSURL *expoUrl = devLauncherUrl.url;
   [self _resetRemoteDebuggingForAppLoad];
   _possibleManifestURL = expoUrl;
   BOOL isEASUpdate = [self isEASUpdateURL:expoUrl];
-  
+
   // an update url requires a matching projectUrl
   // if one isn't provided, default to the configured project url in Expo.plist
   if (isEASUpdate && projectUrl == nil) {
     NSString *projectUrlString = [self getUpdatesConfigForKey:@"EXUpdatesURL"];
     projectUrl = [NSURL URLWithString:projectUrlString];
   }
-  
+
   // if there is no project url and its not an updates url, the project url can be the same as the app url
   if (!isEASUpdate && projectUrl == nil) {
     projectUrl = expoUrl;
   }
-  
+
   // Disable onboarding popup if "&disableOnboarding=1" is a param
   [EXDevLauncherURLHelper disableOnboardingPopupIfNeeded:expoUrl];
 
@@ -442,7 +439,7 @@
   }
 
   EXDevLauncherManifestParser *manifestParser = [[EXDevLauncherManifestParser alloc] initWithURL:expoUrl installationID:installationID session:[NSURLSession sharedSession]];
-  
+
   void (^onIsManifestURL)(BOOL) = ^(BOOL isManifestURL) {
     if (!isManifestURL) {
       // assume this is a direct URL to a bundle hosted by metro
@@ -477,7 +474,7 @@
       }
     } error:onError];
   };
-  
+
   [manifestParser isManifestURLWithCompletion:onIsManifestURL onError:^(NSError * _Nonnull error) {
     if (@available(iOS 14, *)) {
       // Try to retry if the network connection was rejected because of the luck of the lan network permission.
@@ -490,7 +487,7 @@
         return;
       }
     }
-    
+
     onError(error);
   }];
 }
@@ -509,25 +506,25 @@
   _possibleManifestURL = nil;
   __block UIInterfaceOrientation orientation = [EXDevLauncherManifestHelper exportManifestOrientation:manifest.orientation];
   __block UIColor *backgroundColor = [EXDevLauncherManifestHelper hexStringToColor:manifest.iosOrRootBackgroundColor];
-  
+
   __weak __typeof(self) weakSelf = self;
   dispatch_async(dispatch_get_main_queue(), ^{
     if (!weakSelf) {
       return;
     }
     __typeof(self) self = weakSelf;
-    
+
     self.sourceUrl = bundleUrl;
-    
+
 #if RCT_DEV
     // Connect to the websocket
     [[RCTPackagerConnection sharedPackagerConnection] setSocketConnectionURL:bundleUrl];
 #endif
-    
+
     if (@available(iOS 12, *)) {
       UIUserInterfaceStyle userInterfaceStyle = [EXDevLauncherManifestHelper exportManifestUserInterfaceStyle:manifest.userInterfaceStyle];
       [self _applyUserInterfaceStyle:userInterfaceStyle];
-      
+
       // Fix for the community react-native-appearance.
       // RNC appearance checks the global trait collection and doesn't have another way to override the user interface.
       // So we swap `currentTraitCollection` with one from the root view controller.
@@ -540,11 +537,11 @@
     }
 
     [self _addInitModuleObserver];
-    
+
     [self.delegate devLauncherController:self didStartWithSuccess:YES];
-    
+
     [self setDevMenuAppBridge];
-    
+
     [self _ensureUserInterfaceStyleIsInSyncWithTraitEnv:self.window.rootViewController];
 
     if (backgroundColor) {
@@ -603,7 +600,7 @@
   } else if (userInterfaceStyle == UIUserInterfaceStyleLight) {
     colorSchema = @"light";
   }
-  
+
   // change RN appearance
   RCTOverrideAppearancePreference(colorSchema);
 }
@@ -630,7 +627,7 @@
 }
 
 -(NSDictionary *)getBuildInfo
-{ 
+{
   NSMutableDictionary *buildInfo = [NSMutableDictionary new];
 
   NSString *appIcon = [self getAppIcon];
@@ -638,7 +635,7 @@
   NSString *sdkVersion = [self getUpdatesConfigForKey:@"EXUpdatesSDKVersion"];
   NSString *appVersion = [self getFormattedAppVersion];
   NSString *appName = [[NSBundle mainBundle] objectForInfoDictionaryKey: @"CFBundleDisplayName"] ?: [[NSBundle mainBundle] objectForInfoDictionaryKey: @"CFBundleExecutable"];
-  
+
   [buildInfo setObject:appName forKey:@"appName"];
   [buildInfo setObject:appIcon forKey:@"appIcon"];
   [buildInfo setObject:appVersion forKey:@"appVersion"];
@@ -648,17 +645,17 @@
   return buildInfo;
 }
 
--(NSString *)getAppIcon 
+-(NSString *)getAppIcon
 {
   NSString *appIcon = @"";
   NSString *appIconName = [[[[[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleIcons"] objectForKey:@"CFBundlePrimaryIcon"] objectForKey:@"CFBundleIconFiles"]  lastObject];
-  
+
   if (appIconName != nil) {
     NSString *resourcePath = [[NSBundle mainBundle] resourcePath];
     NSString *appIconPath = [[resourcePath stringByAppendingString:appIconName] stringByAppendingString:@".png"];
     appIcon = [@"file://" stringByAppendingString:appIconPath];
   }
-  
+
   return appIcon;
 }
 
@@ -666,10 +663,10 @@
 {
   NSString *value = @"";
   NSString *path = [[NSBundle mainBundle] pathForResource:@"Expo" ofType:@"plist"];
-  
+
   if (path != nil) {
     NSDictionary *expoConfig = [NSDictionary dictionaryWithContentsOfFile:path];
-    
+
     if (expoConfig != nil) {
       value = [expoConfig objectForKey:key] ?: @"";
     }
@@ -678,7 +675,7 @@
   return value;
 }
 
--(NSString *)getFormattedAppVersion 
+-(NSString *)getFormattedAppVersion
 {
   NSString *shortVersion = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"];
   NSString *buildVersion = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleVersion"];
@@ -695,7 +692,7 @@
 {
   DevMenuManager *manager = [DevMenuManager shared];
   manager.currentBridge = self.appBridge;
-  
+
   if (self.manifest != nil) {
     manager.currentManifest = self.manifest;
     manager.currentManifestURL = self.manifestURL;
@@ -713,34 +710,34 @@
 -(NSDictionary *)getUpdatesConfig
 {
   NSMutableDictionary *updatesConfig = [NSMutableDictionary new];
-  
+
   NSString *runtimeVersion = [self getUpdatesConfigForKey:@"EXUpdatesRuntimeVersion"];
   NSString *sdkVersion = [self getUpdatesConfigForKey:@"EXUpdatesSDKVersion"];
-  
+
   // url structure for EASUpdates: `http://u.expo.dev/{appId}`
   // this url field is added to app.json.updates when running `eas update:configure`
   // the `u.expo.dev` determines that it is the modern manifest protocol
   NSString *projectUrl = [self getUpdatesConfigForKey:@"EXUpdatesURL"];
   NSURL *url = [NSURL URLWithString:projectUrl];
   NSString *appId = [[url pathComponents] lastObject];
-  
+
   BOOL isModernManifestProtocol = [[url host] isEqualToString:@"u.expo.dev"] || [[url host] isEqualToString:@"staging-u.expo.dev"];
   BOOL expoUpdatesInstalled = EXDevLauncherController.sharedInstance.updatesInterface != nil;
   BOOL hasAppId = appId.length > 0;
-  
+
   BOOL usesEASUpdates = isModernManifestProtocol && expoUpdatesInstalled && hasAppId;
-  
+
   [updatesConfig setObject:runtimeVersion forKey:@"runtimeVersion"];
   [updatesConfig setObject:sdkVersion forKey:@"sdkVersion"];
-  
-  
+
+
   if (usesEASUpdates) {
     [updatesConfig setObject:appId forKey:@"appId"];
     [updatesConfig setObject:projectUrl forKey:@"projectUrl"];
   }
-  
+
   [updatesConfig setObject:@(usesEASUpdates) forKey:@"usesEASUpdates"];
-    
+
   return updatesConfig;
 }
 
diff --git a/ios/EXDevLauncherURLHelper.swift b/ios/EXDevLauncherURLHelper.swift
index a1d2a30d5a256e8cb96b9bdedb986ab83daa1993..c5dca0839247ba550d425a369b2ffefedf2ddb86 100644
--- a/ios/EXDevLauncherURLHelper.swift
+++ b/ios/EXDevLauncherURLHelper.swift
@@ -3,6 +3,8 @@
 import Foundation
 import EXDevMenu
 
+
+
 @objc
 public class EXDevLauncherUrl: NSObject {
   @objc
@@ -83,4 +85,38 @@ public class EXDevLauncherURLHelper: NSObject {
 
     return dict
   }
+
+    @objc
+    public static func hostIsIp(_ host: String) -> Bool {
+        let parts = host.components(separatedBy: ".")
+        if (parts.count != 4) {
+            return false;
+        }
+
+        for item in parts {
+            var tmp = 0
+            if(item.count > 3 || item.count < 1){
+                return false
+            }
+
+            for char in item {
+                if(char < "0" || char > "9"){
+                    return false
+                }
+
+                tmp = tmp * 10 + Int(String(char))!
+            }
+
+            if(tmp < 0 || tmp > 255){
+                return false
+            }
+
+            if((tmp > 0 && item.first == "0") || (tmp == 0 && item.count > 1)){
+                return false
+            }
+        }
+
+
+        return true
+    }
 }